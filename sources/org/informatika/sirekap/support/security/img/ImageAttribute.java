package org.informatika.sirekap.support.security.img;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.firebase.messaging.Constants;
import kotlin.Metadata;
import kotlin.jvm.internal.DefaultConstructorMarker;
import kotlin.jvm.internal.Intrinsics;
import kotlin.text.StringsKt;

/* compiled from: ImageAttribute.kt */
@Metadata(d1 = {"\u0000*\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0007\n\u0002\u0010\u0012\n\u0000\n\u0002\u0010\u000b\n\u0002\b\u0002\n\u0002\u0010\b\n\u0002\b\u0003\b\u0086\b\u0018\u0000 \u00132\u00020\u0001:\u0001\u0013B\u0007\b\u0016¢\u0006\u0002\u0010\u0002B\u000f\u0012\b\u0010\u0003\u001a\u0004\u0018\u00010\u0004¢\u0006\u0002\u0010\u0005J\u000b\u0010\t\u001a\u0004\u0018\u00010\u0004HÆ\u0003J\u0015\u0010\n\u001a\u00020\u00002\n\b\u0002\u0010\u0003\u001a\u0004\u0018\u00010\u0004HÆ\u0001J\u0006\u0010\u000b\u001a\u00020\fJ\u0013\u0010\r\u001a\u00020\u000e2\b\u0010\u000f\u001a\u0004\u0018\u00010\u0001H\u0096\u0002J\b\u0010\u0010\u001a\u00020\u0011H\u0016J\t\u0010\u0012\u001a\u00020\u0004HÖ\u0001R\u0010\u0010\u0006\u001a\u00020\u00048\u0002X\u0083D¢\u0006\u0002\n\u0000R\u0015\u0010\u0003\u001a\u0004\u0018\u00010\u00048\u0007¢\u0006\b\n\u0000\u001a\u0004\b\u0007\u0010\b¨\u0006\u0014"}, d2 = {"Lorg/informatika/sirekap/support/security/img/ImageAttribute;", "", "()V", "sign", "", "(Ljava/lang/String;)V", "comment", "getSign", "()Ljava/lang/String;", "component1", "copy", "encode", "", "equals", "", "other", "hashCode", "", "toString", "Companion", "app_productionRelease"}, k = 1, mv = {1, 8, 0}, xi = 48)
/* loaded from: classes2.dex */
public final class ImageAttribute {
    public static final Companion Companion = new Companion(null);
    @JsonProperty("com")
    private final String comment;
    private final String sign;

    public static /* synthetic */ ImageAttribute copy$default(ImageAttribute imageAttribute, String str, int i, Object obj) {
        if ((i & 1) != 0) {
            str = imageAttribute.sign;
        }
        return imageAttribute.copy(str);
    }

    public final String component1() {
        return this.sign;
    }

    public final ImageAttribute copy(String str) {
        return new ImageAttribute(str);
    }

    public String toString() {
        return "ImageAttribute(sign=" + this.sign + ")";
    }

    public ImageAttribute(String str) {
        this.sign = str;
        this.comment = "This data was generated by Sirekap Application";
    }

    @JsonProperty("sig")
    public final String getSign() {
        return this.sign;
    }

    public ImageAttribute() {
        this(null);
    }

    /* compiled from: ImageAttribute.kt */
    @Metadata(d1 = {"\u0000\u0018\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u000e\n\u0000\b\u0086\u0003\u0018\u00002\u00020\u0001B\u0007\b\u0002¢\u0006\u0002\u0010\u0002J\u000e\u0010\u0003\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0006¨\u0006\u0007"}, d2 = {"Lorg/informatika/sirekap/support/security/img/ImageAttribute$Companion;", "", "()V", "decode", "Lorg/informatika/sirekap/support/security/img/ImageAttribute;", Constants.ScionAnalytics.MessageType.DATA_MESSAGE, "", "app_productionRelease"}, k = 1, mv = {1, 8, 0}, xi = 48)
    /* loaded from: classes2.dex */
    public static final class Companion {
        public /* synthetic */ Companion(DefaultConstructorMarker defaultConstructorMarker) {
            this();
        }

        private Companion() {
        }

        public final ImageAttribute decode(String data) {
            Intrinsics.checkNotNullParameter(data, "data");
            Object readValue = new ObjectMapper().readValue(data, ImageAttribute.class);
            Intrinsics.checkNotNullExpressionValue(readValue, "mapper.readValue(data, ImageAttribute::class.java)");
            return (ImageAttribute) readValue;
        }
    }

    public final byte[] encode() {
        byte[] writeValueAsBytes = new ObjectMapper().writeValueAsBytes(this);
        Intrinsics.checkNotNullExpressionValue(writeValueAsBytes, "mapper.writeValueAsBytes(this)");
        return writeValueAsBytes;
    }

    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (Intrinsics.areEqual(getClass(), obj != null ? obj.getClass() : null)) {
            Intrinsics.checkNotNull(obj, "null cannot be cast to non-null type org.informatika.sirekap.support.security.img.ImageAttribute");
            return StringsKt.contentEquals((CharSequence) this.sign, (CharSequence) ((ImageAttribute) obj).sign);
        }
        return false;
    }

    public int hashCode() {
        String str = this.sign;
        return ((str != null ? str.hashCode() : 0) * 31) + this.comment.hashCode();
    }
}
